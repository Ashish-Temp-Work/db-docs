# .github/workflows/create-release.yml
name: Build, Release, and Deploy Site

# Trigger workflow manually, as before
on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      release_note:
        description: 'Release note file (without .md extension, optional)'
        required: false
        default: ''
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

# This job will build the project and generate the site artifact
jobs:
  build-and-prepare-site:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for creating releases and artifacts
      pages: write    # Required for uploading GitHub Pages artifacts
      id-token: write # Required for deploying to GitHub Pages
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Build, test, and generate site with JaCoCo reports
        # This single command runs tests, generates JaCoCo reports, and creates the site
        run: mvn -B clean verify site
      
      - name: Upload site artifact
        # This action saves the generated site content for deployment to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'target/site'
      
      # --- Existing Release steps start here ---
      - name: Get latest tag
        id: get-latest-tag
        run: |
          # Get the latest tag, if no tags exist, use initial commit
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || git rev-list --max-parents=0 HEAD)
          echo "latest-tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          echo "Latest tag: $LATEST_TAG"
      
      - name: Prepare release notes
        id: prepare-release-notes
        run: |
          # Initialize the release notes file
          echo "" > release_notes.md
          
          # Check if release_notes directory exists and a specific file is requested
          if [ -d "release_notes" ] && [ -n "${{ github.event.inputs.release_note }}" ]; then
            RELEASE_NOTE_FILE="release_notes/${{ github.event.inputs.release_note }}.md"
            if [ -f "$RELEASE_NOTE_FILE" ]; then
              echo "📄 Adding custom release notes from: $RELEASE_NOTE_FILE"
              cat "$RELEASE_NOTE_FILE" > release_notes.md
              echo "" >> release_notes.md
              echo "" >> release_notes.md
              echo "---" >> release_notes.md
              echo "" >> release_notes.md
            else
              echo "⚠️ Release note file not found: $RELEASE_NOTE_FILE"
              echo "Available files in release_notes directory:"
              ls -la release_notes/ || echo "Directory is empty or doesn't exist"
            fi
          elif [ -d "release_notes" ]; then
            echo "📁 release_notes directory exists but no specific file requested"
            echo "Available release note files:"
            ls -la release_notes/*.md 2>/dev/null || echo "No .md files found"
          else
            echo "📂 No release_notes directory found, using generated notes only"
          fi
      
      - name: Generate release notes
        id: generate-notes
        run: |
          # Get commits since last tag
          LATEST_TAG="${{ steps.get-latest-tag.outputs.latest-tag }}"
          
          # Append generated content to existing release notes
          echo "## 🚀 What's Changed" >> release_notes.md
          echo "" >> release_notes.md
          
          # Get commits with format: - commit message (author)
          git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%an)" --no-merges >> release_notes.md
          
          # If no commits since last tag, add a note
          COMMIT_COUNT=$(git log ${LATEST_TAG}..HEAD --oneline --no-merges | wc -l)
          if [ "$COMMIT_COUNT" -eq 0 ]; then
            echo "- No new commits since last release" >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "## 📝 Full Changelog" >> release_notes.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${LATEST_TAG}...${{ github.event.inputs.version }}" >> release_notes.md
          
          # Output for debugging
          echo "=== Final Release Notes ==="
          cat release_notes.md
          echo "==========================="
      
      - name: Find JAR file
        id: find-jar
        run: |
          JAR_FILE=$(find target -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -1)
          if [ -z "$JAR_FILE" ]; then
            echo "No JAR file found in target directory"
            exit 1
          fi
          echo "jar-file=$JAR_FILE" >> $GITHUB_OUTPUT
          echo "Found JAR: $JAR_FILE"
      
      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.inputs.version }}
          release_name: Release ${{ github.event.inputs.version }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
      
      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: ${{ steps.find-jar.outputs.jar-file }}
          asset_name: ${{ github.event.repository.name }}-${{ github.event.inputs.version }}.jar
          asset_content_type: application/java-archive
      
      - name: Upload additional artifacts (if any)
        continue-on-error: true
        run: |
          # Check for additional files to upload (e.g., sources, javadoc)
          SOURCES_JAR=$(find target -name "*-sources.jar" | head -1)
          JAVADOC_JAR=$(find target -name "*-javadoc.jar" | head -1)
          
          if [ -n "$SOURCES_JAR" ]; then
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/java-archive" \
              --data-binary @"$SOURCES_JAR" \
              "${{ steps.create-release.outputs.upload_url }}?name=${{ github.event.repository.name }}-${{ github.event.inputs.version }}-sources.jar"
          fi
          
          if [ -n "$JAVADOC_JAR" ]; then
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/java-archive" \
              --data-binary @"$JAVADOC_JAR" \
              "${{ steps.create-release.outputs.upload_url }}?name=${{ github.event.repository.name }}-${{ github.event.inputs.version }}-javadoc.jar"
          fi
      
      - name: Summary
        run: |
          echo "## ✅ Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release URL**: ${{ steps.create-release.outputs.html_url }}" >> $GITHUB_STEP_SUMMARY
          echo "- **JAR File**: ${{ steps.find-jar.outputs.jar-file }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Pre-release**: ${{ github.event.inputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
          if [ -n "${{ github.event.inputs.release_note }}" ]; then
            echo "- **Custom Release Notes**: ${{ github.event.inputs.release_note }}.md" >> $GITHUB_STEP_SUMMARY
          fi
  # --- Existing Release steps end here ---
  
  # This job will deploy the site to GitHub Pages
  deploy-site:
    runs-on: ubuntu-latest
    needs: build-and-prepare-site # Ensures the build job completes successfully before deploying
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      pages: write      # Required to deploy pages
      id-token: write   # Required to authenticate with the OIDC ID token
    
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
